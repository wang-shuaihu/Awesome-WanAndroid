apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'android-aspectjx'
apply from: 'jacoco.gradle'
//apply from: this.project.file("releaseinfo.gradle")
apply plugin: 'me.ele.lancet'
//apply from: project.file('plugin-bytex.gradle')


android {
    ndkVersion '21.4.7075529'
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    defaultConfig {
        applicationId "json.chao.com.wanandroid"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        //AndroidJunitRunner必须要显示指定在defaultConfig中，使用Gradle依赖管理无法使其生效
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        renderscriptTargetApi rootProject.ext.android["renderscriptTargetApi"]
        renderscriptSupportModeEnabled true    // Enable RS support
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "arm64-v8a" //选择要使用的平台
        }
        resConfigs "zh", "zh-rCN"
    }

    buildTypes {
        release {
            // 是否进行混淆
            minifyEnabled true
            // 开启zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            // 移除无用的resource文件
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中定义的资源（例如字符串、尺寸、样式和颜色）
            shrinkResources true
            // 混淆文件的位置，其中 proguard-android.txt 为sdk默认的混淆配置，
            // 它的位置位于android-sdk/tools/proguard/proguard-android.txt，
            // 此外，proguard-android-optimize.txt 也为sdk默认的混淆配置，
            // 但是它默认打开了优化开关，我们可在配置混淆文件将android.util.Log置为无效代码，
            // 以去除apk中打印日志的代码。而 proguard-rules.pro 是该模块下的混淆配置。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
//            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests {
            // Fix unit test resources not included with AS3
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "code"
    productFlavors {
        speed {
            minSdkVersion 17
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

    aaptOptions {
        // 在Android的构建流程中，AAPT会使用内置的
        // 压缩算法来优化res/drawable/目录下的PNG图片，
        // 但这可能会导致本来已经优化过的图片体积变大，
        // 因此需要禁止AAPT来优化PNG图片
        cruncherEnabled = false
    }
}

greendao {
    schemaVersion 1
    targetGenDir 'src/main/java'
    daoPackage 'json.chao.com.wanandroid.core.dao'
}

def implementationDependencies = rootProject.ext.dependencies
def processors = rootProject.ext.annotationProcessor
def apiFileDependencies = rootProject.ext.apiFileDependencies

def debugImplementationDependencies = rootProject.ext.debugImplementationDependencies
def releaseImplementationDependencies = rootProject.ext.releaseImplementationDependencies
def androidTestImplementationDependencies = rootProject.ext.androidTestImplementationDependencies
def testImplementationDependencies = rootProject.ext.testImplementationDependencies

def debugApiDependencies = rootProject.ext.debugApiDependencies
def releaseApiDependencies = rootProject.ext.releaseApiDependencies
def compileOnlyDependencies = rootProject.ext.compileOnlyDependencies

def implementationExcludes = rootProject.ext.implementationExcludes
def debugImplementationExcludes = rootProject.ext.debugImplementationExcludes
def releaseImplementationExcludes = rootProject.ext.releaseImplementationExcludes
def testImplementationExclude = rootProject.ext.testImplementationExcludes
def androidTestImplementationExcludes = rootProject.ext.androidTestImplementationExcludes

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

//    implementation(rootProject.ext.dependencies.glide) {
//        exclude module: 'support-v4' //排除依赖
//        transitive false //禁止传递依赖
//    }

    // 启动器
//    api files('libs/launchstarter-release-1.0.0.aar')

    // 处理所有的 aar 依赖
    apiFileDependencies.each { k, v -> api files(v)}

    // 处理所有的 xxximplementation 依赖
    implementationDependencies.each { k, v -> implementation v }
    debugImplementationDependencies.each { k, v -> debugImplementation v }
    releaseImplementationDependencies.each { k, v -> releaseImplementation v }
    androidTestImplementationDependencies.each { k, v -> androidTestImplementation v }
    testImplementationDependencies.each { k, v -> testImplementation v }
    debugApiDependencies.each { k, v -> debugApi v }
    releaseApiDependencies.each { k, v -> releaseApi v }
    compileOnlyDependencies.each { k, v -> compileOnly v }

    // 处理 annotationProcessor 依赖
    processors.each { k, v -> annotationProcessor v }

    // 处理所有包含 exclude 的依赖
    implementationExcludes.each { entry ->
        implementation(entry.key) {
            entry.value.each { childEntry ->
                exclude(group: childEntry)
            }
        }
    }
    debugImplementationExcludes.each { entry ->
        debugImplementation(entry.key) {
            entry.value.each { childEntry ->
                exclude(group: childEntry.key, module: childEntry.value)
            }
        }
    }
    releaseImplementationExcludes.each { entry ->
        releaseImplementation(entry.key) {
            entry.value.each { childEntry ->
                exclude(group: childEntry.key, module: childEntry.value)
            }
        }
    }
    testImplementationExclude.each { entry ->
        testImplementation(entry.key) {
            entry.value.each { childEntry ->
                exclude(group: childEntry.key, module: childEntry.value)
            }
        }
    }
    androidTestImplementationExcludes.each { entry ->
        androidTestImplementation(entry.key) {
            entry.value.each { childEntry ->
                exclude(group: childEntry.key, module: childEntry.value)
            }
        }
    }

    // httpDns 优化
    api ('com.aliyun.ams:alicloud-android-httpdns:1.3.2@aar') {
        transitive true
    }

//    //base
//    implementation rootProject.ext.dependencies["appcompat-v7"]
//    implementation rootProject.ext.dependencies["cardview-v7"]
//    implementation rootProject.ext.dependencies["design"]
//    implementation rootProject.ext.dependencies["constraint-layout"]
//
//    //ui
//    implementation([
//            rootProject.ext.dependencies["SmartRefreshLayout"],
//            rootProject.ext.dependencies["SmartRefreshHeader"]
//    ])
//    implementation rootProject.ext.dependencies["banner"]
//    implementation rootProject.ext.dependencies["FlycoTabLayout_Lib"]
//    implementation rootProject.ext.dependencies["VerticalTabLayout"]
//    implementation rootProject.ext.dependencies["flowlayout-lib"]
//    implementation rootProject.ext.dependencies["agentweb"]
//
//    //net
//    implementation rootProject.ext.dependencies["gson"]
//    implementation([
//            rootProject.ext.dependencies["okhttp"],
//            rootProject.ext.dependencies["logging-interceptor"]
//    ])
//    implementation([
//            rootProject.ext.dependencies["retrofit"],
//            rootProject.ext.dependencies["converter-gson"],
//            rootProject.ext.dependencies["adapter-rxjava2"],
//            rootProject.ext.dependencies["retrofit-url-manager"]
//    ])
//    implementation rootProject.ext.dependencies["glide"]
//    annotationProcessor rootProject.ext.dependencies["glide_compiler"]
//
//    //dao
//    implementation rootProject.ext.dependencies["greendao"]
//
//    //rx
//    implementation([
//            rootProject.ext.dependencies["rxjava"],
//            rootProject.ext.dependencies["rxandroid"],
//            rootProject.ext.dependencies["rxbinding"],
//            rootProject.ext.dependencies["rxpermissions"]
//    ])
//
//    //di
//    implementation([
//            rootProject.ext.dependencies["dagger"],
//            rootProject.ext.dependencies["dagger-android"],
//            rootProject.ext.dependencies["dagger-android-support"]
//    ])
//    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
//    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
//
//    implementation([
//            rootProject.ext.dependencies["javax_annotation"],
//            rootProject.ext.dependencies["butterknife"]
//    ])
//    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
//
//    //multidex
//    implementation rootProject.ext.dependencies["multidex"]
//
//    //canary
//    debugImplementation (rootProject.ext.dependencies["leakcanary-android"]) {
//        exclude group: 'com.android.support'
//    }
//    releaseImplementation (rootProject.ext.dependencies["leakcanary-android-no-op"]) {
//        exclude group: 'com.android.support'
//    }
//    testImplementation (rootProject.ext.dependencies["leakcanary-android-no-op"]) {
//        exclude group: 'com.android.support'
//    }
//
//    //other
//    implementation rootProject.ext.dependencies["lottie"]
//    implementation rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
//
//    implementation([
//            rootProject.ext.dependencies["fragmentation"],
//            rootProject.ext.dependencies["fragmentation-swipeback"]
//    ])
//
//    implementation rootProject.ext.dependencies["crashreport_upgrade"]
//    implementation rootProject.ext.dependencies["logger"]
//    implementation rootProject.ext.dependencies["ByeBurger"]
//    implementation([
//            rootProject.ext.dependencies["stetho"],
//            rootProject.ext.dependencies["stetho-okhttp3"]
//    ])
//    implementation rootProject.ext.dependencies["PersistentCookieJar"]
//    implementation rootProject.ext.dependencies["XUpdate"]
//
//    //UI测试
//    androidTestImplementation(rootProject.ext.dependencies["espresso-core"]) {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    }
//    implementation(rootProject.ext.dependencies["espresso-idling-resource"]) {
//        exclude module: 'support-annotations'
//    }
//    androidTestImplementation([
//            rootProject.ext.dependencies["espresso-contrib"],
//            rootProject.ext.dependencies["espresso-intents"],
//            rootProject.ext.dependencies["espresso-accessibility"],
//            rootProject.ext.dependencies["espresso-web"],
//            rootProject.ext.dependencies["idling-concurrent"]
//    ])
//
//    //unit test
//    testImplementation rootProject.ext.dependencies["junit"]
//    testImplementation rootProject.ext.dependencies["mockito"]
//    testImplementation([
//            rootProject.ext.dependencies["powermock-module-junit4"],
//            rootProject.ext.dependencies["powermock-module-junit4-rule"],
//            rootProject.ext.dependencies["powermock-api-mockito2"]
//    ])
//
//    //注意这里是mockito2
//    testImplementation rootProject.ext.dependencies["powermock-classloading-xstream"]
//    testImplementation rootProject.ext.dependencies["robolectric"]
//    testImplementation rootProject.ext.dependencies["shadows-support-v4"]
//    testImplementation rootProject.ext.dependencies["shadows-multidex"]
//
//    //支持Multidex功能
//    androidTestImplementation rootProject.ext.dependencies["runner"]
//
//    // 性能优化使用到的库
//    implementation 'me.weishu:epic:0.6.0'
//
//    implementation 'org.aspectj:aspectjrt:1.8.14'
//
//    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'
//    implementation 'com.zhangyue.we:x2c-lib:1.0.6'
//
//    testImplementation 'org.ow2.asm:asm:7.1'
//    testImplementation 'org.ow2.asm:asm-commons:7.1'
//
//    // release：项目中实现了线上监控体系的时候去使用
////    api 'com.github.markzhai:blockcanary-android:1.5.0'
//
//    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
//    debugApi 'com.github.markzhai:blockcanary-android:1.5.0'
//    releaseApi 'com.github.markzhai:blockcanary-no-op:1.5.0'
//
//    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
//
//    compileOnly 'me.ele:lancet-base:1.0.5'
//
//    // debug模式耗时方法排查工具，支持线上预览
//    debugImplementation 'com.github.zhengcx:MethodTraceMan:1.0.7'
//    releaseImplementation 'com.github.zhengcx:MethodTraceMan:1.0.5-noop'
//
//    implementation 'com.facebook.soloader:soloader:0.8.0'
//
//    // debug调试桥，输入chrome://inspect => 点击inpsect
//    implementation 'com.facebook.stetho:stetho:1.5.1'

}

//解决支持库版本不兼容问题
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}
repositories {
    mavenCentral()
}

//task MyTask() {
//    println "This is my task~"
//}

//this.getParentProject()
//
//def getParentProject() {
//    def parentName = this.getParent().name
//    println "my parent project is $parentName"
//}



/**
 * 2、文件拷贝
 */
//copy {
//    // 既可以拷贝文件，也可以拷贝文件夹
//    // 这里是将 app moudle 下生成的 apk 目录拷贝到
//    // 根工程下的 build 目录
//    from file("build/outputs/apk")
//    into getRootProject().getBuildDir().path + "/apk/"
//    exclude {
//        // 排除不需要拷贝的文件
//    }
//    rename {
//        // 对拷贝过来的文件进行重命名
//    }
//}


/**
 * 3、文件树遍历
 */
//fileTree("build/outputs/apk") { FileTree fileTree ->
//    fileTree.visit { FileTreeElement fileTreeElement ->
//        println "The file is $fileTreeElement.file.name"
//        copy {
//            from fileTreeElement.file
//            into getRootProject().getBuildDir().path + "/apkTree/"
//        }
//    }
//}


/**
 * 使用 exec 执行外部命令
 */
//task apkMove() {
//    doLast {
//        // 在 gradle 的执行阶段去执行
//        def sourcePath = this.buildDir.path + "/outputs/apk/speed/release/"
//        def destinationPath = "/Users/quchao/Downloads/"
//        def command = "mv -f $sourcePath $destinationPath"
//        exec {
//            try {
//                executable "bash"
//                args "-c", command
//                println "The command execute is success"
//            } catch (GradleException e) {
//                println "The command execute is failed"
//            }
//        }
//    }
//}
//
//// Task 定义方式1：直接通过 task 函数去创建
//task myTask1(group: "MyTask", description: "task1") {
//    println "This is myTask1"
//}
//
//// Task 定义方式2：通过 TaskContainer 去创建 task
//this.tasks.create(name: "myTask2") {
//    setGroup("MyTask")
//    setDescription("task2")
//    println "This is myTask2"
//}
//
//// 使用 Task 在执行阶段进行操作
//task myTask3(group: "MyTask", description: "task3") {
//    println "This is myTask3"
//    doFirst {
//        // 老二
//        println "This group is 2"
//    }
//
//    doLast {
//        // 老三
//        println "This description is 3"
//    }
//}
//
//// 也可以使用 taskName.doxxx 的方式添加执行任务
//myTask3.doFirst {
//    // 这种方式的最先执行 => 老大
//    println "This group is 1"
//}
//
//// Task 执行实战：计算 build 执行期间的耗时
//def startBuildTime, endBuildTime
//// 1、在 Gradle 配置阶段完成之后进行操作，
//// 以此保证要执行的 task 配置完毕
//this.afterEvaluate { Project project ->
//    // 2、找到当前 project 下第一个执行的 task，即 preBuild task
//    def preBuildTask = project.tasks.getByName("preBuild")
//    preBuildTask.doFirst {
//        // 3、获取第一个 task 开始执行时刻的时间戳
//        startBuildTime = System.currentTimeMillis()
//    }
//    // 4、找到当前 project 下最后一个执行的 task，即 build task
//    def buildTask = project.tasks.getByName("build")
//    buildTask.doLast {
//        // 5、获取最后一个 task 执行完成前一瞬间的时间戳
//        endBuildTime = System.currentTimeMillis()
//        // 6、输出 build 执行期间的耗时
//        println "Current project execute time is ${endBuildTime - startBuildTime}"
//    }
//}
//
//task task1 {
//    doLast {
//        println "This is task1"
//    }
//}
//
//task task2 {
//    doLast {
//        println "This is task2"
//    }
//}
//
//// Task 静态依赖方式1 (常用）
//task task3(dependsOn: [task1, task2]) {
//    doLast {
//        println "This is task3"
//    }
//}
//
//// Task 静态依赖方式2
//task3.dependsOn(task1, task2)
//
//// Task 动态依赖方式
//task dytask4 {
//    dependsOn this.tasks.findAll { task ->
//        return task.name.startsWith("task")
//    }
//    doLast {
//        println "This is task4"
//    }
//}
//
//// 通过 API 指定依赖顺序
//task taskX {
//    mustRunAfter "taskY"
//
//    doFirst {
//        println "this is taskX"
//    }
//}
//
//task taskY {
//    // 使用 mustRunAfter 指定依赖的（一至多个）前置 task
//    // 也可以使用 shouldRunAfter 的方式，但是是非强制的依赖
////    shouldRunAfter taskA
//    doFirst {
//        println "this is taskY"
//    }
//}
//
//task taskZ(dependsOn: [taskX, taskY]) {
//    mustRunAfter "taskY"
//    doFirst {
//        println "this is taskZ"
//    }
//}





